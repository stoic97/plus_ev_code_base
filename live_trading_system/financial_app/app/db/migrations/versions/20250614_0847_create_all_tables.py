"""create_all_tables

Revision ID: 587c26861944
Revises: 
Create Date: 2025-06-14 08:47:08.074857+00:00
Database: postgres

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# Detect if we're running against TimescaleDB and need hypertable functionality
import re
from sqlalchemy import inspect, text
from sqlalchemy.engine import reflection

# revision identifiers, used by Alembic.
revision = '587c26861944'
down_revision = None
branch_labels = None
depends_on = None
database = 'postgres'


def create_hypertable(table_name, time_column_name, chunk_time_interval="1 day", 
                     if_not_exists=True, migrate_data=False):
    """Helper function to create a TimescaleDB hypertable."""
    if_not_exists_clause = "IF NOT EXISTS" if if_not_exists else ""
    migrate_data_clause = "WITH (migrate_data=True)" if migrate_data else ""
    
    op.execute(sa.text(f"""
        SELECT create_hypertable(
            '{table_name}', 
            '{time_column_name}',
            {if_not_exists_clause}
            chunk_time_interval => INTERVAL '{chunk_time_interval}'
            {migrate_data_clause}
        )
    """))


def drop_hypertable(table_name, if_exists=True, cascade=False):
    """Helper function to drop a TimescaleDB hypertable."""
    # We don't actually need to do anything special for dropping
    # The standard DROP TABLE command works for hypertables
    pass


def add_cagg(name, hypertable, view_query, time_column, bucket_interval, 
             with_data=True, if_not_exists=True):
    """Helper function to create a TimescaleDB continuous aggregate."""
    if_not_exists_clause = "IF NOT EXISTS" if if_not_exists else ""
    with_data_clause = "WITH DATA" if with_data else "WITH NO DATA"
    
    op.execute(sa.text(f"""
        CREATE MATERIALIZED VIEW {if_not_exists_clause} {name}
        WITH (timescaledb.continuous) AS
        {view_query}
        WITH {with_data_clause}
    """))


def drop_cagg(name, if_exists=True, cascade=False):
    """Helper function to drop a TimescaleDB continuous aggregate."""
    if_exists_clause = "IF EXISTS" if if_exists else ""
    cascade_clause = "CASCADE" if cascade else ""
    
    op.execute(sa.text(f"""
        DROP MATERIALIZED VIEW {if_exists_clause} {name} {cascade_clause}
    """))


def is_timescaledb_available():
    """Check if TimescaleDB extension is available."""
    try:
        connection = op.get_bind()
        result = connection.execute(text("SELECT extname FROM pg_extension WHERE extname = 'timescaledb'"))
        return result.fetchone() is not None
    except Exception:
        return False


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fyers_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('app_id', sa.String(length=50), nullable=False),
    sa.Column('access_token', sa.Text(), nullable=False),
    sa.Column('refresh_token', sa.Text(), nullable=True),
    sa.Column('expiry', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('token_type', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('token_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_fyers_tokens_app_id'), 'fyers_tokens', ['app_id'], unique=True)
    op.create_index('ix_fyers_tokens_app_id_expiry', 'fyers_tokens', ['app_id', 'expiry'], unique=False)
    op.create_index(op.f('ix_fyers_tokens_expiry'), 'fyers_tokens', ['expiry'], unique=False)
    op.create_table('instrument',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('symbol', sa.String(length=32), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('isin', sa.String(length=12), nullable=True),
    sa.Column('figi', sa.String(length=12), nullable=True),
    sa.Column('asset_class', sa.String(length=20), nullable=False),
    sa.Column('exchange', sa.String(length=50), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('expiry_date', sa.DateTime(), nullable=True),
    sa.Column('contract_size', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('price_adj_factor', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('specifications', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('figi'),
    sa.UniqueConstraint('isin'),
    sa.UniqueConstraint('symbol', 'exchange', name='uix_symbol_exchange')
    )
    op.create_index(op.f('ix_instrument_symbol'), 'instrument', ['symbol'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('permissions', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('last_failed_login_at', sa.DateTime(), nullable=True),
    sa.Column('lockout_until', sa.DateTime(), nullable=True),
    sa.Column('trading_limits', sa.JSON(), nullable=True),
    sa.Column('algorithm_access', sa.JSON(), nullable=True),
    sa.Column('environment_access', sa.JSON(), nullable=True),
    sa.Column('has_kill_switch_access', sa.Boolean(), nullable=False),
    sa.Column('emergency_contact', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('key_prefix', sa.String(length=10), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('revoked_at', sa.DateTime(), nullable=True),
    sa.Column('is_revoked', sa.Boolean(), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('environment', sa.String(length=50), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('use_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('target_type', sa.String(length=50), nullable=True),
    sa.Column('target_id', sa.String(length=255), nullable=True),
    sa.Column('environment', sa.String(length=50), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ohlcv',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('open', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('high', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('low', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('close', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('volume', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('interval', sa.String(length=20), nullable=False),
    sa.Column('vwap', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('trades_count', sa.Integer(), nullable=True),
    sa.Column('open_interest', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('adjusted_close', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('source_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_anomaly', sa.Boolean(), nullable=True),
    sa.Column('anomaly_reason', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('instrument_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_ohlcv_instrument_interval_timestamp', 'ohlcv', ['instrument_id', 'interval', 'timestamp'], unique=False)
    op.create_index(op.f('ix_ohlcv_timestamp'), 'ohlcv', ['timestamp'], unique=False)
    op.create_index('ix_ohlcv_timestamp_desc', 'ohlcv', ['timestamp'], unique=False, postgresql_using='brin')
    op.create_table('order_book_snapshot',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('depth', sa.Integer(), nullable=False),
    sa.Column('bids', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('asks', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('spread', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('weighted_mid_price', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('imbalance', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('source_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_anomaly', sa.Boolean(), nullable=True),
    sa.Column('anomaly_reason', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('instrument_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_book_snapshot_timestamp'), 'order_book_snapshot', ['timestamp'], unique=False)
    op.create_index('ix_orderbook_instrument_timestamp', 'order_book_snapshot', ['instrument_id', 'timestamp'], unique=False)
    op.create_index('ix_orderbook_timestamp', 'order_book_snapshot', ['timestamp'], unique=False, postgresql_using='brin')
    op.create_table('password_resets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tick',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('price', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('volume', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('trade_id', sa.String(length=64), nullable=True),
    sa.Column('side', sa.String(length=4), nullable=True),
    sa.Column('trade_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('source_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_anomaly', sa.Boolean(), nullable=True),
    sa.Column('anomaly_reason', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('instrument_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_tick_instrument_timestamp', 'tick', ['instrument_id', 'timestamp'], unique=False)
    op.create_index(op.f('ix_tick_timestamp'), 'tick', ['timestamp'], unique=False)
    op.create_index('ix_tick_trade_id', 'tick', ['trade_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token_id', sa.String(length=255), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('revoked_at', sa.DateTime(), nullable=True),
    sa.Column('is_revoked', sa.Boolean(), nullable=False),
    sa.Column('environment', sa.String(length=50), nullable=True),
    sa.Column('is_algorithmic_session', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token_id')
    )
    op.drop_table('alembic_version_postgres')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('alembic_version_postgres',
    sa.Column('version_num', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('version_num', name=op.f('alembic_version_postgres_pk'))
    )
    op.drop_table('user_sessions')
    op.drop_table('user_roles')
    op.drop_index('ix_tick_trade_id', table_name='tick')
    op.drop_index(op.f('ix_tick_timestamp'), table_name='tick')
    op.drop_index('ix_tick_instrument_timestamp', table_name='tick')
    op.drop_table('tick')
    op.drop_table('password_resets')
    op.drop_index('ix_orderbook_timestamp', table_name='order_book_snapshot', postgresql_using='brin')
    op.drop_index('ix_orderbook_instrument_timestamp', table_name='order_book_snapshot')
    op.drop_index(op.f('ix_order_book_snapshot_timestamp'), table_name='order_book_snapshot')
    op.drop_table('order_book_snapshot')
    op.drop_index('ix_ohlcv_timestamp_desc', table_name='ohlcv', postgresql_using='brin')
    op.drop_index(op.f('ix_ohlcv_timestamp'), table_name='ohlcv')
    op.drop_index('ix_ohlcv_instrument_interval_timestamp', table_name='ohlcv')
    op.drop_table('ohlcv')
    op.drop_table('audit_logs')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_instrument_symbol'), table_name='instrument')
    op.drop_table('instrument')
    op.drop_index(op.f('ix_fyers_tokens_expiry'), table_name='fyers_tokens')
    op.drop_index('ix_fyers_tokens_app_id_expiry', table_name='fyers_tokens')
    op.drop_index(op.f('ix_fyers_tokens_app_id'), table_name='fyers_tokens')
    op.drop_table('fyers_tokens')
    # ### end Alembic commands ###